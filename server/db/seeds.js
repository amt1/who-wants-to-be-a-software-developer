 use pda_quiz;
 db.dropDatabase();

  db.pda_questions.insertMany([
    {
    category: 0,
    category_name: "User Interface Design",
    type: "boolean",
    difficulty: 0,
    question: "A container is an example of an interface element.",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "https://blog.prototypr.io/how-to-teach-yourself-ux-design-31f16e41b189",
  },

  {
    category: 0,
    category_name: "User Interface Design",
    type: "boolean",
    difficulty: 0,
    question: "User interface design (UI design) brings together concepts from information architecture.",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "https://blog.prototypr.io/how-to-teach-yourself-ux-design-31f16e41b189",
  },

  {
    category: 0,
    category_name: "User Interface Design",
    type: "boolean",
    difficulty: 0,
    question: "Dropdown-lists interface elements are known as an input controls.",
    correct_answer: "false",
    incorrect_answers: "true",
    image: "",
    link: "https://blog.prototypr.io/how-to-teach-yourself-ux-design-31f16e41b189",
  },
  //
  {
    category: 0,
    category_name: "User Interface Design",
    type: "boolean",
    difficulty: 0,
    question: "Toggles are NOT interface elements known as an navigational components.",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "https://blog.prototypr.io/how-to-teach-yourself-ux-design-31f16e41b189",
  },

  //
  {
    category: 0,
    category_name: "User Interface Design",
    type: "boolean",
    difficulty: 0,
    question: "The following should be considered for the design of a successful user interface :development factors, visibility factors, acceptance factors.",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "https://blog.prototypr.io/how-to-teach-yourself-ux-design-31f16e41b189",
  },
  //
  {
    category: 1,
    category_name: "Analysis and Design",
    type: "boolean",
    difficulty: 1,
    question: "Waterfall is based on the adaptive software development methods, whereas the traditional SDLC models like the Agile model is based on a predictive approach.",
    correct_answer: "false",
    incorrect_answers: "true",
    image: "",
    link: "https://www.tutorialspoint.com/sdlc/sdlc_overview.htm",
  },

  {
    category: 1,
    category_name: "Analysis and Design",
    type: "boolean",
    difficulty: 1,
    question: "Software Design is a process through which requirements are translated into representation of software.",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "http://www.peter-lo.com/Teaching/CS213/L04.pdf",
  },

  {
    category: 1,
    category_name: "Analysis and Design",
    type: "boolean",
    difficulty: 1,
    question: "The most popular SDLC models followed in industry are Watercross Model, Big Bang Model, V-Model.",
    correct_answer: "false",
    incorrect_answers: "true",
    image: "",
    link: "https://www.tutorialspoint.com/sdlc/sdlc_overview.htm",
  },
  //
  {
    category: 1,
    category_name: "Analysis and Design",
    type: "boolean",
    difficulty: 1,
    question: "The Waterfall Model was the first Process Model to be introduced. It is also referred to as a linear-sequential life cycle model.",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "https://www.tutorialspoint.com/sdlc/sdlc_overview.htm",
  },

  {
    category: 1,
    category_name: "Analysis and Design",
    type: "boolean",
    difficulty: 1,
    question: "In Agile, the tasks are divided to time boxes (small time frames) to deliver specific features for a release.",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "https://www.tutorialspoint.com/sdlc/sdlc_overview.htm",
  },
  {
    category: 2,
    category_name: "Data Dictionary",
    type: "boolean",
    difficulty: 0,
    image: "",
    question: "The SDLC stand for Systematic Development Language for CRUD.",
    correct_answer: "false",
    incorrect_answers: "true",
    image: "",
    link: "https://www.tutorialspoint.com/sdlc/sdlc_overview.htm",
  },
  //
  {
    category: 2,
    category_name: "Data Dictionary",
    type: "boolean",
    difficulty: 0,
    question: "An instance variable is a type of variable that is attached to a class.",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "https://www.computerhope.com/jargon/program.htm",
  },
  {
    category: 2,
    category_name: "Data Dictionary",
    type: "boolean",
    difficulty: 0,
    question: "Parent structure is one of the typical attributes used in CASE tools (Computer Assisted Software Engineering).",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "https://www.computerhope.com/jargon/program.htm",
  },
  {
    category: 2,
    category_name: "Data Dictionary",
    type: "boolean",
    difficulty: 0,
    question: "CASE stands for Computer Aliases Source Editor.",
    correct_answer: "false",
    incorrect_answers: "true",
    image: "",
    link: "https://www.computerhope.com/jargon/program.htm",
  },
  {
    category: 2,
    category_name: "Data Dictionary",
    type: "boolean",
    difficulty: 0,
    question: "Your data definition shouldn't be included with your software documentation.",
    correct_answer: "false",
    incorrect_answers: "true",
    image: "",
    link: "https://www.computerhope.com/jargon/program.htm",
  },
  {
    category: 3,
    category_name: "Data Design",
    type: "boolean",
    difficulty: 1,
    image: "",
    question: "Architectural Design defines the relationship among major structural elements of the program.",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "https://www.geeksforgeeks.org/software-engineering-architectural-design",
  },
  {
    category: 3,
    category_name: "Data Design",
    type: "boolean",
    difficulty: 1,
    image: "",
    question: "Procedural Design describes how the software communicates within itself, to systems that inter-operates with it and humans who use it.",
    correct_answer: "false",
    incorrect_answers: "true",
    image: "",
    link: "https://en.wikipedia.org/wiki/Procedural_design",
  },
  {
    category: 3,
    category_name: "Data Design",
    type: "boolean",
    difficulty: 1,
    image: "",
    question: "The primary activity during Data Design is to select logical respresentation of data objects identified during the requirements definition and specification phase.",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "https://en.wikipedia.org/wiki/Database_design",
  },
  {
    category: 3,
    category_name: "Data Design",
    type: "boolean",
    difficulty: 1,
    image: "",
    question: "Transform Flow and Transaction Flow are a Data Flow Types.",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "http://www.peter-lo.com/Teaching/CS213/L04.pdf",
  },
  {
    category: 3,
    category_name: "Data Design",
    type: "boolean",
    difficulty: 1,
    image: "",
    question: "Architectural Design defines the relationship between user and software.",
    correct_answer: "false",
    incorrect_answers: "true",
    image: "",
    link: "https://en.wikipedia.org/wiki/Procedural_design",
  },
  {
    category: 4,
    category_name: "Qualities of Great Software",
    type: "boolean",
    difficulty: 1,
    question: "There are 6 concerns relating to the qualities of great software: Functionality, reliability, usability, efficiency, maintainability and portability concerns.",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "https://practicingruby.com/articles/qualities-of-great-software",
  },
  {
    category: 4,
    category_name: "Qualities of Great Software",
    type: "boolean",
    difficulty: 1,
    image: "",
    question: "ISO/IEC 9126 is divided into quality model, external metrics, internal metrics and quality in use metrics.",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "https://practicingruby.com/articles/qualities-of-great-software",
  },
  {
    category: 4,
    category_name: "Qualities of Great Software",
    type: "boolean",
    difficulty: 1,
    image: "",
    question: "Suitability, accuracy, interoperability and security are issues considered in reliability concerns.",
    correct_answer: "false",
    incorrect_answers: "true",
    image: "",
    link: "https://practicingruby.com/articles/qualities-of-great-software",
  },
  {
    category: 4,
    category_name: "Qualities of Great Software",
    type: "boolean",
    difficulty: 1,
    image: "",
    question: "The issues to consider in usability of software are understability, learnability, operability and attractiveness.",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "https://practicingruby.com/articles/qualities-of-great-software",
  },

  {
    category: 4,
    category_name: "Qualities of Great Software",
    type: "boolean",
    difficulty: 1,
    image: "",
    question: "Simple code: Passes all the tests, expresses only main idea, has superfluous parts.",
    correct_answer: "false",
    incorrect_answers: "true",
    image: "",
    link: "https://practicingruby.com/articles/qualities-of-great-software",
  },
  {
    category: 5,
    category_name: "Functional and non Functional Requirements",
    type: "boolean",
    difficulty: 1,
    question: "Functional requirements describe how the system works.",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "https://reqtest.com/requirements-blog/functional-vs-non-functional-requirements",
  },
  //
   {
    category: 5,
    category_name: "Functional and non Functional Requirements",
    type: "boolean",
    difficulty: 1,
    question: "Functional requirements specify a behaviour or function.",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "https://reqtest.com/requirements-blog/functional-vs-non-functional-requirements",
  },
  //
  {
    category: 5,
    category_name: "Functional and non Functional Requirements",
    type: "boolean",
    difficulty: 1,
    question: "Functional requirements describe how the system works, while non-functional requirements describe what the system should do.",
    correct_answer: "false",
    incorrect_answers: "true",
    image: "",
    link: "https://reqtest.com/requirements-blog/functional-vs-non-functional-requirements",
  },
  {
    category: 5,
    category_name: "Functional and non Functional Requirements",
    type: "boolean",
    difficulty: 1,
    question: "Some typical non-functional requirements are: performance, scalability, capacity, reliability, security, maintainability.",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "https://reqtest.com/requirements-blog/functional-vs-non-functional-requirements",
  },
  {
    category: 5,
    category_name: "Functional and non Functional Requirements",
    type: "boolean",
    difficulty: 1,
    question: "Some of the more typical functional requirements include: Business Rules, Transaction corrections, Authentication, Audit Tracking.",
    correct_answer: "true",
    incorrect_answers: "false",
    image: "",
    link: "https://reqtest.com/requirements-blog/functional-vs-non-functional-requirements",
  },
]);
